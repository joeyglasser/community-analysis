region.statistics$ration[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
#setup
rm(list = ls())
user.directory = "c:/Users/spamb/" #where your dropbox file is
source(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/compare_covers_function_bank.R", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Data/comm_results.Rdata", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Postprocessing/Results/communities_and_hubs_cvt2.Rdata", sep = ''))
numeric.msa.2010 = lapply(msa2010, as.integer)
for(i in 1:nrow(E)){
node1 = E[i,1]
node2 = E[i,2]
node1.fips = key$fips[key$node == node1]
node2.fips = key$fips[key$node == node2]
E[i,1] = node1.fips
E[i,2] = node2.fips
}
commuters.in.community = list()
for(i in 1:length(numeric.msa.2010)){
community = numeric.msa.2010[[i]]
in.commuinty = (E$node1 %in% community) & (E$node2 %in% community)
commuters.in.community[i] = sum(E$commuters[in.commuinty])
}
unaccounted = sum(E$commuters) - sum(sapply(commuters.in.community, sum))
print(unaccounted)
print(unaccounted / sum(E$commuters))
get.commuter.count <- function(community, SL = 0){
in.commuinty = (E$node1 %in% community) & (E$node2 %in% community)
total.commuters <- sum(E$commuters[in.commuinty])
if(SL != 0){
sl.count <- 0
for(j in 1:length(community)){
county <- community[[j]]
in.county = (E$node1 == county) & (E$node2 == county)
sl.count = sl.count + sum(E$commuters[in.county])
}
if(SL < 0){
return(total.commuters - sl.count)
} else {
return(sl.count)
}
} else {
return(total.commuters)
}
}
get.distinct.traffic <- function(cover){
include.edge <- logical(length = length(E$node1))
for(i in 1:length(cover)){
community = lapply(cover[[i]], as.integer)
in.community = (E$node1 %in% community) & (E$node2 %in% community)
include.edge = include.edge | in.community
}
return(sum(E$commuters[include.edge]))
}
region.statistics = data.frame(1:9)
colnames(region.statistics) <- c("Region")
region.statistics$nCommunities <- 0 # number of communities
region.statistics$avgCommuters <- 0 # average number of commuters per community
region.statistics$avgSL <- 0 # average number of self looping commuters per community
region.statistics$avgNSL <- 0 # average number of non self looping commuters per community
region.statistics$communityCommuters <- 0 #number of commuters communiting within a community
region.statistics$totalCommuters <- 0 #total traffic in region
region.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(msa2010, i), as.integer)
region.statistics$nCommunities[i] <- length(region.cover)
region.statistics$avgCommuters[i] <- mean(sapply(region.cover, get.commuter.count, SL = 0))
region.statistics$avgSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = 1))
region.statistics$avgNSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = -1))
region.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
region.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
region.statistics$ration[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
region.statistics
region.statistics = data.frame(1:9)
colnames(region.statistics) <- c("Region")
region.statistics$nCommunities <- 0 # number of communities
region.statistics$avgCommuters <- 0 # average number of commuters per community
region.statistics$avgSL <- 0 # average number of self looping commuters per community
region.statistics$avgNSL <- 0 # average number of non self looping commuters per community
region.statistics$communityCommuters <- 0 #number of commuters communiting within a community
region.statistics$totalCommuters <- 0 #total traffic in region
region.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(msa2010, i), as.integer)
region.statistics$nCommunities[i] <- length(region.cover)
region.statistics$avgCommuters[i] <- mean(sapply(region.cover, get.commuter.count, SL = 0))
region.statistics$avgSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = 1))
region.statistics$avgNSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = -1))
region.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
region.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
region.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
region.statistics
knitr::opts_chunk$set(echo = TRUE)
#setup
rm(list = ls())
user.directory = "c:/Users/spamb/" #where your dropbox file is
source(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/compare_covers_function_bank.R", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Data/comm_results.Rdata", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Postprocessing/Results/communities_and_hubs_cvt2.Rdata", sep = ''))
#setup
rm(list = ls())
user.directory = "c:/Users/spamb/" #where your dropbox file is
source(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/compare_covers_function_bank.R", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Data/comm_results.Rdata", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Postprocessing/Results/communities_and_hubs_cvt2.Rdata", sep = ''))
numeric.msa.2010 = lapply(msa2010, as.integer)
for(i in 1:nrow(E)){
node1 = E[i,1]
node2 = E[i,2]
node1.fips = key$fips[key$node == node1]
node2.fips = key$fips[key$node == node2]
E[i,1] = node1.fips
E[i,2] = node2.fips
}
commuters.in.community = list()
for(i in 1:length(numeric.msa.2010)){
community = numeric.msa.2010[[i]]
in.commuinty = (E$node1 %in% community) & (E$node2 %in% community)
commuters.in.community[i] = sum(E$commuters[in.commuinty])
}
unaccounted = sum(E$commuters) - sum(sapply(commuters.in.community, sum))
print(unaccounted)
print(unaccounted / sum(E$commuters))
get.commuter.count <- function(community, SL = 0){
in.commuinty = (E$node1 %in% community) & (E$node2 %in% community)
total.commuters <- sum(E$commuters[in.commuinty])
if(SL != 0){
sl.count <- 0
for(j in 1:length(community)){
county <- community[[j]]
in.county = (E$node1 == county) & (E$node2 == county)
sl.count = sl.count + sum(E$commuters[in.county])
}
if(SL < 0){
return(total.commuters - sl.count)
} else {
return(sl.count)
}
} else {
return(total.commuters)
}
}
get.distinct.traffic <- function(cover){
include.edge <- logical(length = length(E$node1))
for(i in 1:length(cover)){
community = lapply(cover[[i]], as.integer)
in.community = (E$node1 %in% community) & (E$node2 %in% community)
include.edge = include.edge | in.community
}
return(sum(E$commuters[include.edge]))
}
region.statistics = data.frame(1:9)
colnames(region.statistics) <- c("Region")
region.statistics$nCommunities <- 0 # number of communities
region.statistics$avgCommuters <- 0 # average number of commuters per community
region.statistics$avgSL <- 0 # average number of self looping commuters per community
region.statistics$avgNSL <- 0 # average number of non self looping commuters per community
region.statistics$communityCommuters <- 0 #number of commuters communiting within a community
region.statistics$totalCommuters <- 0 #total traffic in region
region.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(msa2010, i), as.integer)
region.statistics$nCommunities[i] <- length(region.cover)
region.statistics$avgCommuters[i] <- mean(sapply(region.cover, get.commuter.count, SL = 0))
region.statistics$avgSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = 1))
region.statistics$avgNSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = -1))
region.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
region.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
region.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
region.statistics
community.statistics = data.frame(1:9)
colnames(community.statistics) <- c("Region")
community.statistics$nCommunities <- 0 # number of communities
community.statistics$avgCommuters <- 0 # average number of commuters per community
community.statistics$communityCommuters <- 0 #commuters traveling within a community
community.statistics$totalCommuters <- 0 #total traffic in region
for(i in 1:9){
region.cover <- lapply(region.extraction(comms_cvt, i), as.integer)
community.statistics$nCommunities[i] <- length(region.cover)
community.statistics$avgCommuters[i] <- mean(sapply(region.cover, get.commuter.count, SL = 0))
community.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
community.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
}
community.statistics
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
return(cover.statistics)
}
get.region.coverage(comms_cvt)
get.region.coverage(hubspoke_cvt)
hubspoke_cvt
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
return(cover.statistics)
}
get.region.coverage(comms_cvt)
get.region.coverage(hubspoke_cvt)
comms_cvt
hubspoke_cvt
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
if(length(region.cover) > 0){
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
}
return(cover.statistics)
}
get.region.coverage(comms_cvt)
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
if(length(region.cover) > 0){
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
}
return(cover.statistics)
}
get.region.coverage(hubspoke_cvt)
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
if(length(region.cover) > 0){
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
}
return(cover.statistics)
}
get.region.coverage(island_cvt)
install.packages('xtable')
install.packages("xtable")
xtable(hubspoke.statistics)
library(xtable)
knitr::opts_chunk$set(echo = TRUE)
hubspoke.statistics <- get.region.coverage(hubspoke_cvt)
xtable(hubspoke.statistics)
#setup
rm(list = ls())
library(xtable)
user.directory = "c:/Users/spamb/" #where your dropbox file is
source(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/compare_covers_function_bank.R", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Data/comm_results.Rdata", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Postprocessing/Results/communities_and_hubs_cvt2.Rdata", sep = ''))
get.region.coverage(c(comms_cvt, hubspoke_cvt, island_cvt))
#setup
rm(list = ls())
library(xtable)
user.directory = "c:/Users/spamb/" #where your dropbox file is
source(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/compare_covers_function_bank.R", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Data/comm_results.Rdata", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Postprocessing/Results/communities_and_hubs_cvt2.Rdata", sep = ''))
numeric.msa.2010 = lapply(msa2010, as.integer)
for(i in 1:nrow(E)){
node1 = E[i,1]
node2 = E[i,2]
node1.fips = key$fips[key$node == node1]
node2.fips = key$fips[key$node == node2]
E[i,1] = node1.fips
E[i,2] = node2.fips
}
commuters.in.community = list()
for(i in 1:length(numeric.msa.2010)){
community = numeric.msa.2010[[i]]
in.commuinty = (E$node1 %in% community) & (E$node2 %in% community)
commuters.in.community[i] = sum(E$commuters[in.commuinty])
}
unaccounted = sum(E$commuters) - sum(sapply(commuters.in.community, sum))
print(unaccounted)
print(unaccounted / sum(E$commuters))
knitr::opts_chunk$set(echo = TRUE)
#setup
rm(list = ls())
library(xtable)
user.directory = "c:/Users/spamb/" #where your dropbox file is
source(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/compare_covers_function_bank.R", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Data/comm_results.Rdata", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Postprocessing/Results/communities_and_hubs_cvt2.Rdata", sep = ''))
numeric.msa.2010 = lapply(msa2010, as.integer)
for(i in 1:nrow(E)){
node1 = E[i,1]
node2 = E[i,2]
node1.fips = key$fips[key$node == node1]
node2.fips = key$fips[key$node == node2]
E[i,1] = node1.fips
E[i,2] = node2.fips
}
commuters.in.community = list()
for(i in 1:length(numeric.msa.2010)){
community = numeric.msa.2010[[i]]
in.commuinty = (E$node1 %in% community) & (E$node2 %in% community)
commuters.in.community[i] = sum(E$commuters[in.commuinty])
}
unaccounted = sum(E$commuters) - sum(sapply(commuters.in.community, sum))
print(unaccounted)
print(unaccounted / sum(E$commuters))
get.commuter.count <- function(community, SL = 0){
in.commuinty = (E$node1 %in% community) & (E$node2 %in% community)
total.commuters <- sum(E$commuters[in.commuinty])
if(SL != 0){
sl.count <- 0
for(j in 1:length(community)){
county <- community[[j]]
in.county = (E$node1 == county) & (E$node2 == county)
sl.count = sl.count + sum(E$commuters[in.county])
}
if(SL < 0){
return(total.commuters - sl.count)
} else {
return(sl.count)
}
} else {
return(total.commuters)
}
}
get.distinct.traffic <- function(cover){
include.edge <- logical(length = length(E$node1))
for(i in 1:length(cover)){
community = lapply(cover[[i]], as.integer)
in.community = (E$node1 %in% community) & (E$node2 %in% community)
include.edge = include.edge | in.community
}
return(sum(E$commuters[include.edge]))
}
region.statistics = data.frame(1:9)
colnames(region.statistics) <- c("Region")
region.statistics$nCommunities <- 0 # number of communities
region.statistics$avgCommuters <- 0 # average number of commuters per community
region.statistics$avgSL <- 0 # average number of self looping commuters per community
region.statistics$avgNSL <- 0 # average number of non self looping commuters per community
region.statistics$communityCommuters <- 0 #number of commuters communiting within a community
region.statistics$totalCommuters <- 0 #total traffic in region
region.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(msa2010, i), as.integer)
region.statistics$nCommunities[i] <- length(region.cover)
region.statistics$avgCommuters[i] <- mean(sapply(region.cover, get.commuter.count, SL = 0))
region.statistics$avgSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = 1))
region.statistics$avgNSL[i] <- mean(sapply(region.cover, get.commuter.count, SL = -1))
region.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
region.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
region.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
region.statistics
community.statistics = data.frame(1:9)
colnames(community.statistics) <- c("Region")
community.statistics$nCommunities <- 0 # number of communities
community.statistics$avgCommuters <- 0 # average number of commuters per community
community.statistics$communityCommuters <- 0 #commuters traveling within a community
community.statistics$totalCommuters <- 0 #total traffic in region
for(i in 1:9){
region.cover <- lapply(region.extraction(comms_cvt, i), as.integer)
community.statistics$nCommunities[i] <- length(region.cover)
community.statistics$avgCommuters[i] <- mean(sapply(region.cover, get.commuter.count, SL = 0))
community.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
community.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
}
community.statistics
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
if(length(region.cover) > 0){
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- region.statistics$communityCommuters[i]/region.statistics$totalCommuters[i]
}
}
return(cover.statistics)
}
island.statistics <- get.region.coverage(island_cvt)
get.region.coverage(c(comms_cvt, hubspoke_cvt, island_cvt))
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
if(length(region.cover) > 0){
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- cover.statistics$communityCommuters[i]/cover.statistics$totalCommuters[i]
}
}
return(cover.statistics)
}
island.statistics <- get.region.coverage(island_cvt)
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
if(length(region.cover) > 0){
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- cover.statistics$communityCommuters[i]/cover.statistics$totalCommuters[i]
}
}
return(cover.statistics)
}
island.statistics <- get.region.coverage(island_cvt)
island.statistics
hubspoke.statistics <- get.region.coverage(hubspoke_cvt)
hubspoke.statistics
get.region.coverage(c(comms_cvt, hubspoke_cvt, island_cvt))
everything.coverage <- get.region.coverage(c(comms_cvt, hubspoke_cvt, island_cvt))
everything.coverage
community.statistics = data.frame(1:9)
colnames(community.statistics) <- c("Region")
community.statistics$nCommunities <- 0 # number of communities
community.statistics$avgCommuters <- 0 # average number of commuters per community
community.statistics$communityCommuters <- 0 #commuters traveling within a community
community.statistics$totalCommuters <- 0 #total traffic in region
for(i in 1:9){
region.cover <- lapply(region.extraction(comms_cvt, i), as.integer)
community.statistics$nCommunities[i] <- length(region.cover)
community.statistics$avgCommuters[i] <- mean(sapply(region.cover, get.commuter.count, SL = 0))
community.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
community.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
}
community.statistics
get.region.coverage <- function(cover){
cover.statistics = data.frame(1:9)
colnames(cover.statistics) <- c("Region")
cover.statistics$communityCommuters <- 0 #number of commuters communiting within a community
cover.statistics$totalCommuters <- 0 #total traffic in region
cover.statistics$ratio <- 0 # % traffic accounted for
for(i in 1:9){
region.cover <- lapply(region.extraction(cover, i), as.integer)
if(length(region.cover) > 0){
cover.statistics$communityCommuters[i] <- get.distinct.traffic(region.cover)
cover.statistics$totalCommuters[i] <- get.commuter.count(unlist(region.extraction(as.character(unique(c(E$node1, E$node2))), i)))
cover.statistics$ratio[i] <- cover.statistics$communityCommuters[i]/cover.statistics$totalCommuters[i]
}
}
return(cover.statistics)
}
island.statistics <- get.region.coverage(island_cvt)
island.statistics
hubspoke.statistics <- get.region.coverage(hubspoke_cvt)
hubspoke.statistics
everything.coverage <- get.region.coverage(c(comms_cvt, hubspoke_cvt, island_cvt))
everything.coverage
knitr::opts_chunk$set(echo = TRUE)
#setup
rm(list = ls())
library(xtable)
user.directory = "c:/Users/spamb/" #where your dropbox file is
source(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/compare_covers_function_bank.R", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Data/comm_results.Rdata", sep = ''))
load(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/Postprocessing/Results/communities_and_hubs_cvt2.Rdata", sep = ''))
numeric.msa.2010 = lapply(msa2010, as.integer)
for(i in 1:nrow(E)){
node1 = E[i,1]
node2 = E[i,2]
node1.fips = key$fips[key$node == node1]
node2.fips = key$fips[key$node == node2]
E[i,1] = node1.fips
E[i,2] = node2.fips
}
