} else {
tags[tags$fips == county,"communities"] = paste(tags[tags$fips == county,"communities"], as.character(i), sep = ", ")
}
}
}
#creating labels in html format from the dataframe tags
labels <- sprintf(
"<strong>%s</strong><br/>Community: %s",
tags$name, tags$communities
) %>% lapply(htmltools::HTML)
#initializing leaflet map
map <- leaflet(continental.counties) %>% addPolygons(color = "#000000", fillColor = "#FFFFFF", fillOpacity = 1, weight = 1 ,group = "main",layerId = continental.counties$fips)
print(test)
#adding layers
for(i in 1:as.integer(ncol(map.layers)/2)){
if(!is.null(county)){
county.rows = map.layers[,GetLabel(i)]
} else {
county.rows = map.layers[map.layers[,1] == county ,GetLabel(i)]
}
map = map %>% addPolygons(data = continental.counties[county.rows,], color = "#000000", fillColor = map.layers[county.rows, GetLabel(i,TRUE)], fillOpacity = 0.5,
weight = 1, group = as.character(i)
)
}
map = map %>% addPolygons(data = continental.counties, color = "transparent", fillColor = "transparent", fillOpacity = 1, weight = 1 ,group = "labels",
label = labels)
map = map %>% addTiles() %>%
addLabelOnlyMarkers(label =  ~as.character(),
labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T))
#adding layer control
map = map %>% addLayersControl(
baseGroups = c("main"),
overlayGroups = c("labels",as.character(1:as.integer(ncol(map.layers)/2))),
options = layersControlOptions(collapsed = TRUE)
)
return(map)
}
#Sample execution
load("sample.group.list")
map = CreateMap(sample.group.list)
map
#CreateMap(labeled.clus)
library(leaflet)
library(magrittr)
library(htmltools)
library(tnet)
user.directory = "c:/Users/spamb/" #where your dropbox file is
setwd(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/data", sep = ''))
load("continental_counties.Rdata") #loads continental.counties which is a dataframe necessary for plotting counties in U.S
load("2010_undirected_edgelist.Rdata")
CreateMap = function(group.list, county = NULL, state = NULL){
# Creates interactable leaflet map for communities. More on leaflet maps can be found here: https://rstudio.github.io/leaflet/
#
# Args:
#   group.list: list of groups of counties. Each county is represented by a string that is the concatanation of its state and county fips codes.
#   each group represents a community
#
# Returns:
#   A leaflet map
# substate.cover <- function(cover, state.fips){
#   only.state.counties <- sapply(cover, function(y) y[sapply(y, function(x)  as.numeric(substr(x,1,2)) == state.fips)])
#   only.state.counties <- only.state.counties[sapply(only.state.counties, length) > 0]
#   return(only.state.counties)
# }
#
#
# if(!is.null(state)){
#   group.list <- substate.cover(group.list, state)
#   continental.counties <- continental.counties[as.numeric(continental.counties$STATEFP) == state,]
# }
#
#Filtering out counties from group.list not found in continental.counties which is used for plotting
counties.not.found = list()
list.index = 1
for(i in 1:length(group.list)){
counties = as.numeric(group.list[[i]])
counties.in.shapefile = counties %in% continental.counties$fips
if(sum(!counties.in.shapefile) != 0){
missing.counties = counties[!counties.in.shapefile] #counties not found in continental.counties
missing.counties = missing.counties[!(missing.counties %in% counties.not.found)] #counties not found that haven't been accounted for
if(length(missing.counties) > 0){ #adding unaccounted for counties to counties.not.found list
for(j in 1:length(missing.counties)){
counties.not.found[[list.index]] = missing.counties[j]
list.index = list.index + 1
}
}
group.list[[i]] = as.character(counties[counties.in.shapefile]) #filtering out counties from group.list
}
}
group.list = group.list[sapply(group.list,length) > 0] #filtering out empty communities
if(length(counties.not.found > 0)){ #if any counties were not found
print("Counties in the group list were not found in the shape file and will not be plotted.")
print(paste("Counties not found: ", paste(counties.not.found, collapse = ", "), sep = ""))
}
#orders group list by number of counties
ordered.group.list = group.list[order(sapply(group.list,length), decreasing = TRUE)]
#Subsetting data for specific county
if(!is.null(county)){
boolean.subset = as.numeric(lapply(ordered.group.list, function(x) county %in% as.numeric(x))) == 1
ordered.group.list = subset(ordered.group.list,boolean.subset)
}
#creates color palette for mapping
colors = sample(rainbow(length(ordered.group.list)))
#community.key is a dataframe that will be used to determine which groups belong to which layers
#first column is the community id
#second column is used to keep track of which community as already been accounted for in a layer
#subsequent columns indicate if the community will be included in layer 1, 2, 3, etc.
community.key = data.frame(1:length(ordered.group.list))
colnames(community.key) = c("id")
community.key$plotted = FALSE
#map.layers is a dataframe that will be used to find which counties belong in what layers as well as their color
#the first column is the fips codes for each county
#columns labeled "includeX" will indicate whether each county will be included in layer X
#columns labeled "colorX" will give the color for the county in layer X
map.layers = data.frame(continental.counties$fips)
#a method to obtain the column name for map.layers
GetLabel = function(x, color = FALSE){
if(color){
return(paste("color",as.character(x),sep = ""))
} else {
return(paste("include",as.character(x),sep = ""))
}
}
#creating disjoint layers of communities
column = 3
while(TRUE){
#initializing columns of community.key and map.layers
community.key[,column] = FALSE
map.layers[,GetLabel(column-2)] = FALSE
map.layers[,GetLabel(column-2, TRUE)] = "transparent"
for(i in community.key[!(community.key$plotted),"id"]){ #for the community id's that have not been plotted
if(sum(ordered.group.list[[i]] %in% unlist(ordered.group.list[community.key[,column]])) == 0){ #if this community id does not overlap with any others in the layer
community.key[i,column] = TRUE
community.key[i, "plotted"] = TRUE
counties = as.numeric(ordered.group.list[[i]])
county.bool = map.layers[,1] %in% counties #a boolean to select rows of counties that are in the current community
map.layers[county.bool, GetLabel(column-2)] = TRUE
map.layers[county.bool, GetLabel(column-2, TRUE)] = substr(colors[i],1,7)
}
}
if(sum(community.key$plotted) == nrow(community.key)){ #if every community has been accounted for
break
} else {
column = column + 1 #otherwise, we add a new layer
}
}
#tags will contain the data for the labels of the counties
tags = data.frame(continental.counties$NAME, continental.counties$fips)
tags[,3] = ""
colnames(tags) = c("name","fips","communities")
for(i in 1:length(ordered.group.list)){ #interating over each community
counties = as.numeric(ordered.group.list[[i]])
for(j in 1:length(counties)){ #adding group number to each county tag
county = counties[j]
if(tags[tags$fips == county,"communities"] == ""){
tags[tags$fips == county,"communities"] = as.character(i)
} else {
tags[tags$fips == county,"communities"] = paste(tags[tags$fips == county,"communities"], as.character(i), sep = ", ")
}
}
}
#creating labels in html format from the dataframe tags
labels <- sprintf(
"<strong>%s</strong><br/>Community: %s",
tags$name, tags$communities
) %>% lapply(htmltools::HTML)
#initializing leaflet map
map <- leaflet(continental.counties) %>% addPolygons(color = "#000000", fillColor = "#FFFFFF", fillOpacity = 1, weight = 1 ,group = "main",layerId = continental.counties$fips)
#adding layers
for(i in 1:as.integer(ncol(map.layers)/2)){
if(!is.null(county)){
county.rows = map.layers[,GetLabel(i)]
} else {
county.rows = map.layers[map.layers[,1] == county ,GetLabel(i)]
}
map = map %>% addPolygons(data = continental.counties[county.rows,], color = "#000000", fillColor = map.layers[county.rows, GetLabel(i,TRUE)], fillOpacity = 0.5,
weight = 1, group = as.character(i)
)
}
map = map %>% addPolygons(data = continental.counties, color = "transparent", fillColor = "transparent", fillOpacity = 1, weight = 1 ,group = "labels",
label = labels)
#adding layer control
map = map %>% addLayersControl(
baseGroups = c("main"),
overlayGroups = c("labels",as.character(1:as.integer(ncol(map.layers)/2))),
options = layersControlOptions(collapsed = TRUE)
)
return(map)
}
#Sample execution
load("sample.group.list")
map = CreateMap(sample.group.list)
map
#CreateMap(labeled.clus)
rm(list = ls())
library(leaflet)
library(magrittr)
library(htmltools)
library(tnet)
user.directory = "c:/Users/spamb/" #where your dropbox file is
setwd(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/data", sep = ''))
load("continental_counties.Rdata") #loads continental.counties which is a dataframe necessary for plotting counties in U.S
load("2010_undirected_edgelist.Rdata")
CreateMap = function(group.list, county = NULL, state = NULL){
# Creates interactable leaflet map for communities. More on leaflet maps can be found here: https://rstudio.github.io/leaflet/
#
# Args:
#   group.list: list of groups of counties. Each county is represented by a string that is the concatanation of its state and county fips codes.
#   each group represents a community
#
# Returns:
#   A leaflet map
substate.cover <- function(cover, state.fips){
only.state.counties <- sapply(cover, function(y) y[sapply(y, function(x)  as.numeric(substr(x,1,2)) == state.fips)])
only.state.counties <- only.state.counties[sapply(only.state.counties, length) > 0]
return(only.state.counties)
}
if(!is.null(state)){
group.list <- substate.cover(group.list, state)
continental.counties <- continental.counties[as.numeric(continental.counties$STATEFP) == state,]
}
#Filtering out counties from group.list not found in continental.counties which is used for plotting
counties.not.found = list()
list.index = 1
for(i in 1:length(group.list)){
counties = as.numeric(group.list[[i]])
counties.in.shapefile = counties %in% continental.counties$fips
if(sum(!counties.in.shapefile) != 0){
missing.counties = counties[!counties.in.shapefile] #counties not found in continental.counties
missing.counties = missing.counties[!(missing.counties %in% counties.not.found)] #counties not found that haven't been accounted for
if(length(missing.counties) > 0){ #adding unaccounted for counties to counties.not.found list
for(j in 1:length(missing.counties)){
counties.not.found[[list.index]] = missing.counties[j]
list.index = list.index + 1
}
}
group.list[[i]] = as.character(counties[counties.in.shapefile]) #filtering out counties from group.list
}
}
group.list = group.list[sapply(group.list,length) > 0] #filtering out empty communities
if(length(counties.not.found > 0)){ #if any counties were not found
print("Counties in the group list were not found in the shape file and will not be plotted.")
print(paste("Counties not found: ", paste(counties.not.found, collapse = ", "), sep = ""))
}
#orders group list by number of counties
ordered.group.list = group.list[order(sapply(group.list,length), decreasing = TRUE)]
#Subsetting data for specific county
if(!is.null(county)){
boolean.subset = as.numeric(lapply(ordered.group.list, function(x) county %in% as.numeric(x))) == 1
ordered.group.list = subset(ordered.group.list,boolean.subset)
}
#creates color palette for mapping
colors = sample(rainbow(length(ordered.group.list)))
#community.key is a dataframe that will be used to determine which groups belong to which layers
#first column is the community id
#second column is used to keep track of which community as already been accounted for in a layer
#subsequent columns indicate if the community will be included in layer 1, 2, 3, etc.
community.key = data.frame(1:length(ordered.group.list))
colnames(community.key) = c("id")
community.key$plotted = FALSE
#map.layers is a dataframe that will be used to find which counties belong in what layers as well as their color
#the first column is the fips codes for each county
#columns labeled "includeX" will indicate whether each county will be included in layer X
#columns labeled "colorX" will give the color for the county in layer X
map.layers = data.frame(continental.counties$fips)
#a method to obtain the column name for map.layers
GetLabel = function(x, color = FALSE){
if(color){
return(paste("color",as.character(x),sep = ""))
} else {
return(paste("include",as.character(x),sep = ""))
}
}
#creating disjoint layers of communities
column = 3
while(TRUE){
#initializing columns of community.key and map.layers
community.key[,column] = FALSE
map.layers[,GetLabel(column-2)] = FALSE
map.layers[,GetLabel(column-2, TRUE)] = "transparent"
for(i in community.key[!(community.key$plotted),"id"]){ #for the community id's that have not been plotted
if(sum(ordered.group.list[[i]] %in% unlist(ordered.group.list[community.key[,column]])) == 0){ #if this community id does not overlap with any others in the layer
community.key[i,column] = TRUE
community.key[i, "plotted"] = TRUE
counties = as.numeric(ordered.group.list[[i]])
county.bool = map.layers[,1] %in% counties #a boolean to select rows of counties that are in the current community
map.layers[county.bool, GetLabel(column-2)] = TRUE
map.layers[county.bool, GetLabel(column-2, TRUE)] = substr(colors[i],1,7)
}
}
if(sum(community.key$plotted) == nrow(community.key)){ #if every community has been accounted for
break
} else {
column = column + 1 #otherwise, we add a new layer
}
}
#tags will contain the data for the labels of the counties
tags = data.frame(continental.counties$NAME, continental.counties$fips)
tags[,3] = ""
colnames(tags) = c("name","fips","communities")
for(i in 1:length(ordered.group.list)){ #interating over each community
counties = as.numeric(ordered.group.list[[i]])
for(j in 1:length(counties)){ #adding group number to each county tag
county = counties[j]
if(tags[tags$fips == county,"communities"] == ""){
tags[tags$fips == county,"communities"] = as.character(i)
} else {
tags[tags$fips == county,"communities"] = paste(tags[tags$fips == county,"communities"], as.character(i), sep = ", ")
}
}
}
#creating labels in html format from the dataframe tags
labels <- sprintf(
"<strong>%s</strong><br/>Community: %s",
tags$name, tags$communities
) %>% lapply(htmltools::HTML)
#initializing leaflet map
map <- leaflet(continental.counties) %>% addPolygons(color = "#000000", fillColor = "#FFFFFF", fillOpacity = 1, weight = 1 ,group = "main",layerId = continental.counties$fips)
#adding layers
for(i in 1:as.integer(ncol(map.layers)/2)){
if(!is.null(county)){
county.rows = map.layers[,GetLabel(i)]
} else {
county.rows = map.layers[map.layers[,1] == county ,GetLabel(i)]
}
map = map %>% addPolygons(data = continental.counties[county.rows,], color = "#000000", fillColor = map.layers[county.rows, GetLabel(i,TRUE)], fillOpacity = 0.5,
weight = 1, group = as.character(i)
)
}
map = map %>% addPolygons(data = continental.counties, color = "transparent", fillColor = "transparent", fillOpacity = 1, weight = 1 ,group = "labels",
label = labels)
#adding layer control
map = map %>% addLayersControl(
baseGroups = c("main"),
overlayGroups = c("labels",as.character(1:as.integer(ncol(map.layers)/2))),
options = layersControlOptions(collapsed = TRUE)
)
return(map)
}
#Sample execution
load("sample.group.list")
map = CreateMap(sample.group.list, state = 37)
map
#CreateMap(labeled.clus)
continental.counties <- continental.counties[as.numeric(continental.counties$STATEFP) == 37,]
View(continental.counties)
user.directory = "c:/Users/spamb/" #where your dropbox file is
setwd(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/data", sep = ''))
load("continental_counties.Rdata") #loads continental.counties which is a dataframe necessary for plotting counties in U.S
load("2010_undirected_edgelist.Rdata")
continental.counties <- continental.counties[as.numeric(as.factor(continental.counties$STATEFP)) == 37,]
View(continental.counties)
user.directory = "c:/Users/spamb/" #where your dropbox file is
setwd(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/data", sep = ''))
load("continental_counties.Rdata") #loads continental.counties which is a dataframe necessary for plotting counties in U.S
load("2010_undirected_edgelist.Rdata")
continental.counties <- continental.counties[as.numeric(as.factor(continental.counties$STATEFP)) == 37,]
View(continental.counties)
load("continental_counties.Rdata") #loads continental.counties which is a dataframe necessary for plotting counties in U.S
View(continental.counties)
continental.counties[[1]]
continental.counties$STATEFP
continental.counties$STATEFP == 19
library(leaflet)
library(magrittr)
library(htmltools)
library(tnet)
user.directory = "c:/Users/spamb/" #where your dropbox file is
setwd(paste(user.directory, "Dropbox/regiondemarcation/code/git/community-analysis/data", sep = ''))
load("continental_counties.Rdata") #loads continental.counties which is a dataframe necessary for plotting counties in U.S
load("2010_undirected_edgelist.Rdata")
CreateMap = function(group.list, county = NULL, state = NULL){
# Creates interactable leaflet map for communities. More on leaflet maps can be found here: https://rstudio.github.io/leaflet/
#
# Args:
#   group.list: list of groups of counties. Each county is represented by a string that is the concatanation of its state and county fips codes.
#   each group represents a community
#
# Returns:
#   A leaflet map
substate.cover <- function(cover, state.fips){
only.state.counties <- sapply(cover, function(y) y[sapply(y, function(x)  as.numeric(substr(x,1,2)) == state.fips)])
only.state.counties <- only.state.counties[sapply(only.state.counties, length) > 0]
return(only.state.counties)
}
if(!is.null(state)){
group.list <- substate.cover(group.list, state)
continental.counties <- continental.counties[continental.counties$STATEFP == state,]
}
#Filtering out counties from group.list not found in continental.counties which is used for plotting
counties.not.found = list()
list.index = 1
for(i in 1:length(group.list)){
counties = as.numeric(group.list[[i]])
counties.in.shapefile = counties %in% continental.counties$fips
if(sum(!counties.in.shapefile) != 0){
missing.counties = counties[!counties.in.shapefile] #counties not found in continental.counties
missing.counties = missing.counties[!(missing.counties %in% counties.not.found)] #counties not found that haven't been accounted for
if(length(missing.counties) > 0){ #adding unaccounted for counties to counties.not.found list
for(j in 1:length(missing.counties)){
counties.not.found[[list.index]] = missing.counties[j]
list.index = list.index + 1
}
}
group.list[[i]] = as.character(counties[counties.in.shapefile]) #filtering out counties from group.list
}
}
group.list = group.list[sapply(group.list,length) > 0] #filtering out empty communities
if(length(counties.not.found > 0)){ #if any counties were not found
print("Counties in the group list were not found in the shape file and will not be plotted.")
print(paste("Counties not found: ", paste(counties.not.found, collapse = ", "), sep = ""))
}
#orders group list by number of counties
ordered.group.list = group.list[order(sapply(group.list,length), decreasing = TRUE)]
#Subsetting data for specific county
if(!is.null(county)){
boolean.subset = as.numeric(lapply(ordered.group.list, function(x) county %in% as.numeric(x))) == 1
ordered.group.list = subset(ordered.group.list,boolean.subset)
}
#creates color palette for mapping
colors = sample(rainbow(length(ordered.group.list)))
#community.key is a dataframe that will be used to determine which groups belong to which layers
#first column is the community id
#second column is used to keep track of which community as already been accounted for in a layer
#subsequent columns indicate if the community will be included in layer 1, 2, 3, etc.
community.key = data.frame(1:length(ordered.group.list))
colnames(community.key) = c("id")
community.key$plotted = FALSE
#map.layers is a dataframe that will be used to find which counties belong in what layers as well as their color
#the first column is the fips codes for each county
#columns labeled "includeX" will indicate whether each county will be included in layer X
#columns labeled "colorX" will give the color for the county in layer X
map.layers = data.frame(continental.counties$fips)
#a method to obtain the column name for map.layers
GetLabel = function(x, color = FALSE){
if(color){
return(paste("color",as.character(x),sep = ""))
} else {
return(paste("include",as.character(x),sep = ""))
}
}
#creating disjoint layers of communities
column = 3
while(TRUE){
#initializing columns of community.key and map.layers
community.key[,column] = FALSE
map.layers[,GetLabel(column-2)] = FALSE
map.layers[,GetLabel(column-2, TRUE)] = "transparent"
for(i in community.key[!(community.key$plotted),"id"]){ #for the community id's that have not been plotted
if(sum(ordered.group.list[[i]] %in% unlist(ordered.group.list[community.key[,column]])) == 0){ #if this community id does not overlap with any others in the layer
community.key[i,column] = TRUE
community.key[i, "plotted"] = TRUE
counties = as.numeric(ordered.group.list[[i]])
county.bool = map.layers[,1] %in% counties #a boolean to select rows of counties that are in the current community
map.layers[county.bool, GetLabel(column-2)] = TRUE
map.layers[county.bool, GetLabel(column-2, TRUE)] = substr(colors[i],1,7)
}
}
if(sum(community.key$plotted) == nrow(community.key)){ #if every community has been accounted for
break
} else {
column = column + 1 #otherwise, we add a new layer
}
}
#tags will contain the data for the labels of the counties
tags = data.frame(continental.counties$NAME, continental.counties$fips)
tags[,3] = ""
colnames(tags) = c("name","fips","communities")
for(i in 1:length(ordered.group.list)){ #interating over each community
counties = as.numeric(ordered.group.list[[i]])
for(j in 1:length(counties)){ #adding group number to each county tag
county = counties[j]
if(tags[tags$fips == county,"communities"] == ""){
tags[tags$fips == county,"communities"] = as.character(i)
} else {
tags[tags$fips == county,"communities"] = paste(tags[tags$fips == county,"communities"], as.character(i), sep = ", ")
}
}
}
#creating labels in html format from the dataframe tags
labels <- sprintf(
"<strong>%s</strong><br/>Community: %s",
tags$name, tags$communities
) %>% lapply(htmltools::HTML)
#initializing leaflet map
map <- leaflet(continental.counties) %>% addPolygons(color = "#000000", fillColor = "#FFFFFF", fillOpacity = 1, weight = 1 ,group = "main",layerId = continental.counties$fips)
#adding layers
for(i in 1:as.integer(ncol(map.layers)/2)){
if(!is.null(county)){
county.rows = map.layers[,GetLabel(i)]
} else {
county.rows = map.layers[map.layers[,1] == county ,GetLabel(i)]
}
map = map %>% addPolygons(data = continental.counties[county.rows,], color = "#000000", fillColor = map.layers[county.rows, GetLabel(i,TRUE)], fillOpacity = 0.5,
weight = 1, group = as.character(i)
)
}
map = map %>% addPolygons(data = continental.counties, color = "transparent", fillColor = "transparent", fillOpacity = 1, weight = 1 ,group = "labels",
label = labels)
#adding layer control
map = map %>% addLayersControl(
baseGroups = c("main"),
overlayGroups = c("labels",as.character(1:as.integer(ncol(map.layers)/2))),
options = layersControlOptions(collapsed = TRUE)
)
return(map)
}
#Sample execution
load("sample.group.list")
map = CreateMap(sample.group.list, state = 37)
map
#CreateMap(labeled.clus)
